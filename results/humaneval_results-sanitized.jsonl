{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list\n    sorted_numbers = sorted(numbers)\n    \n    # Iterate through all possible pairs (i, j)\n    for i in range(len(sorted_numbers) - 1):\n        for j in range(i + 1, len(sorted_numbers)):\n            # Calculate absolute differences\n            diff1 = abs(sorted_numbers[i] - sorted_numbers[j])\n            diff2 = abs(sorted_numbers[j] - sorted_numbers[i])\n            \n            # Check if either difference is within or equal to the threshold\n            if diff1 <= threshold or diff2 <= threshold:\n                return True\n    \n    # Return False if no closest pair is found\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize variables\n    balance = 0\n    result = []\n    \n    # Iterate over each character in the string\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        # Check if at any point balance is negative and close remaining pairs before processing another group\n        if balance < 0:\n            raise ValueError(\"Unbalanced parentheses\")\n        \n        # Add characters except spaces when balanced is zero or when there are no more characters left after processing one group\n        if not (balance > 0 or len(paren_string) <= 1):\n            result.append(char.strip())\n    \n    return result"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Get the integer part using int() function which truncates towards zero if necessary.\n    integer_part = int(number)\n    \n    # Subtract this from the original number to get the fractional portion.\n    fractional_part = number - integer_part\n    \n    return fractional_part"}
{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize the balance to zero\n    balance = 0\n    \n    # Iterate through each operation in the list\n    for operation in operations:\n        # Update the balance based on the current operation\n        if operation < 0:\n            balance -= operation\n        \n        # Check if at any point the balance is negative\n        if balance < 0:\n            return True\n    \n    # If no negative number was found, return False after checking all operations\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List"}
{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    \n    # Check if the input list is empty\n    if not numbers:\n        return []\n    \n    # Initialize an empty result list\n    result = []\n    \n    # Iterate through the input list and add each element followed by the delimiter to the result list\n    for num in numbers:\n        result.append(num)\n        if len(result) > 0:\n            result.append(delimiter)\n    \n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List"}
{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Use list comprehension to filter the strings based on the condition\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    \n    # Initialize variables for the sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    # Return the result as a tuple\n    return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "solution": "from typing import List\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3]\n    \"\"\"\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through each number in the input list\n    for num in numbers:\n        # If this is the first number or greater than or equal to the current max,\n        if not result or num >= result[-1]:\n            # Append this number as it is as it's either new or greater than any previous max value found.\n            result.append(num)\n        else:\n            # Otherwise append the previous max value plus this number.\n            result.append(result[-1] + num)\n    \n    return result\nnumbers = [1000000]"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n        >>> make_palindrome('')\n        ''\n        >>> make_palindrome('cat')\n        'catac'\n        >>> make_palindrome('cata')\n        'catac'\n    \n    \"\"\"\n    \n    # Step 1: Find the longest postfix of s which is also a palindrome\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            break\n    \n    # Step 2: Reverse and prepend to s to form a palindrome\n    reversed_string = reversed(s)\n    \n     # The remaining part after removing suffix from original s should be equal to reversed_string[:i]"}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    # Ensure both strings are of equal length by padding with leading zeros\n    max_length = max(len(a), len(b))\n    a = a.zfill(max_length)\n    b = b.zfill(max_length)\n\n    # Initialize an empty result string\n    result = ''\n\n    # Perform XOR operation for each pair of characters\n    for i in range(max_length):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    \n    # Check if the input list is empty\n    if not strings:\n        return None\n    \n    # Use max to find and return the maximum string in lexicographical order\n    return max(strings)"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    # Initialize an empty list to store the prefixes\n    prefixes = []\n    \n    # Iterate over each character in the string\n    for i in range(len(string)):\n        # Append each character as a prefix to the list\n        prefixes.append(string[:i + 1])\n    \n    return prefixes"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    \n    # Initialize an empty list to store the sequence of numbers\n    sequence = []\n    \n    # Loop through the range from 0 to n (inclusive)\n    for i in range(n + 1):\n        # Append each number to the sequence list, separated by spaces\n        sequence.append(str(i))\n    \n    # Join the elements of the list into a single string with spaces separating them\n    return ' '.join(sequence)"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    \n    # Convert the string to lowercase to ensure case insensitivity\n    lower_string = string.lower()\n    \n    # Use set to store unique characters and return its length\n    return len(set(lower_string))"}
{"task_id": "HumanEval/17", "solution": "from typing import List"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string.\n    Count overlaping cases.\n    \n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    \n    # Initialize counter for overlaps\n    overlap_count = 0\n    \n    # Iterate over each character in the string\n    for i in range(len(string)):\n        # Check if current character matches substrings starting from i+1 and ending at end of string (inclusive)\n        if i + len(substring) <= len(string):\n            match = True\n            \n            # Check for matching characters up to end of current position plus one (to ensure overlap)\n            for j in range(i + len(substring), len(string) + 1):\n                if not match or string[j - len(substring)] != substring[j]:\n                    break\n                \n                overlap_count += 1\n    \n        else:\n            break\n    \n    return overlap_count"}
{"task_id": "HumanEval/19", "solution": "from typing import List"}
{"task_id": "HumanEval/20", "solution": "from typing import List\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    # Initialize variables to store the smallest and largest numbers found so far\n    min_value = float('inf')\n    max_value = float('-inf')\n    \n    # Iterate through each number in the list\n    for num in numbers:\n        # Update min_value if current number is smaller than min_value\n        if num < min_value:\n            min_value = num\n        \n        # Update max_value if current number is larger than max_value\n        if num > max_value:\n            max_value = num\n    \n    return (min_value, max_value)"}
{"task_id": "HumanEval/21", "solution": "from typing import List"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\""}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \n        :param n: The integer to be factored\n        :return: A list of prime factors in ascending order\n        \"\"\"\n    \n    # Base case: if n is less than or equal to 1, return an empty list since there are no prime factors\n    if n <= 1:\n        return []\n    \n    # Initialize a list to store the result and set it as an empty list initially for efficiency\n    result = []"}
{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = {}\n    \n    # Iterate over each number in the input list\n    for num in numbers:\n        # If the number is not already in seen\n        if num not in seen:\n            # Add it to both seen and result lists\n            seen[num] = True\n            result.append(num)\n    \n    return result\nnumbers = [1, 2, 3, 2, 4]"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # Use list comprehension for concise and readable code\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"}
{"task_id": "HumanEval/28", "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    # Use list comprehension to filter strings starting with the given prefix\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3])\n    [5]\n    >>> get_positive([99999987778888], [])\n    []\n    \"\"\"\n    \n    # Use list comprehension to filter out negative numbers\n    positive_numbers = [num for num in l if num > 0]\n    \n    return positive_numbers"}
{"task_id": "HumanEval/31", "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\""}
{"task_id": "HumanEval/32", "solution": "import math\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    \n    find_zero returns only one zero point, even if there are many.\n    \n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n     -0.5\n     >>> round(find_zero([-6, 11, -6, 1]), 2)\n      -4.999999999987778e-36 # (x - (-4)) * (x - (-3)) == (-6 + (-4)) * (-6 + (-3)) == -(4*4)\n     \"\"\"\n    \n    def evaluate_polynomial(coeffs: list):\n        result = coeffs[0]\n        for coeff in coeffs[1:]:\n            result += coeff * math.pow(x, i)\n        return result\n    \n    # Iterate over possible values of x from both ends towards each other\n    for left_x in range(-math.inf if len(xs) % 2 else int(len(xs)/2), math.inf):\n        right_x = left_x + (len(xs)//(len(xs)-left_x))"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a new list l' such that:\n    - l' is identical to l in the indicies that are not divisible by three.\n    - Its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9])\n    [2]\n    \n     \"\"\"\n    \n    # Extract elements at indices divisible by three"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Convert the list to a set to remove duplicates and then back to a list\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by either 11 or 13.\"\"\"\n    count = 0\n    \n    for i in range(n):\n        if i % (i % (5 * i + -2)) == (i % (5 * i + -2)) == (-i % (5 * i + -2)):\n            count += str(i).count('7')\n    \n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    \n    # Extract elements from index positions (0-based) into two lists: one for even positions and one for odd positions\n    evens = [l[i] for i in range(len(l)) if i % 2 ==0]\n    \n    odds = [l[i] for i in range(len(l)) if i % 2 !=0]\n    \n    # Sort both lists of elements\n    evens.sort()\n    \n    # Merge sorted evens back into their original order with sorted odds placed back into their original order"}
{"task_id": "HumanEval/38", "solution": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\""}
{"task_id": "HumanEval/39", "solution": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Return n-th number that is a Fibonacci number and it's also prime.\"\"\"\n    # Initialize the first two Fibonacci numbers\n    fib1 = 0\n    fib2 = 1\n    \n    # Generate Fibonacci numbers until we find n-th one that is both prime and greater than or equal to n-1\n    while True:\n        next_fib = fib1 + fib2\n        \n        # Check if the current Fibonacci number is greater than or equal to n-1 and odd (since only odd primes are considered)\n        if next_fib >= n - 1 and next_fib % 2 != 0:\n            break\n        \n        # Update the last two generated fibonacci numbers for generating new ones efficiently\n        fib_temp = fib2\n        fib2 = next_fib\n        \n        # If all conditions are met, break out of loop as required by problem statement (n-th even)\n        \n# Example usage:\nprint(prime_fib(4))   # Output: The nth even Prime Number after generating up to index=4."}
{"task_id": "HumanEval/40", "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\""}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    \n    This function outputs the number of such collisions.\n    \n        Args:\n        n (int): Number of cars\n    \n        Returns:\n        int: Number of collisions\n        \"\"\"\n    # Since each car from one direction will collide with eachcarfromtheoppositedirectionexactlyonce,\n    # if there are 'n'cars in one direction, there will be 'n*n'collisions.\n    \n    return n * n"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3])\n    [6, 4, 6, 3, 4]\n    \"\"\"\n    return [x + y for x in l for y in range(1)]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3 ,5 ,7])\n     True\n     >>> pairs_sum_to_zero([1])\n     False\n    \n   \"\"\"\n    \n# Create a set to store seen numbers for O(1) average time complexity lookups.\nseen_numbers = set()"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    if not (1 <= base <= 9):\n        raise ValueError(\"Base must be between 2 and 9.\")\n    \n    if x == 0:\n        return \"0\"\n    \n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    \n    return result"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    # Calculate semi-perimeter\n    s = (a + b + h) / 2\n    \n    # Calculate area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    return area"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n\n    # Initialize the first four Fibonacci numbers\n    a, b, c, d = 0, 0, 2, 0\n\n    # Compute the nth Fibonacci number iteratively\n    for _ in range(4):\n        next_fib = a + b + c + d\n        a = b\n        b = c\n        c = d\n        d = next_fib\n\n    return d"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    \n    # Step-by-step approach:\n    \n    # Sort the list in ascending order\n    sorted_list = sorted(l)\n    \n    # Calculate length of sorted_list\n    n = len(sorted_list)\n    \n    # Check if number of elements is odd or even\n    \n    if n % 2 == 1:\n        # Odd number: Return middle element (index n //2)\n        return sorted_list[n // 2]\n    \n    else:\n        # Even number: Return average of two middle elements (n //2 - (n //4))\n        mid_index = n //4 + (n %4 == -1) \n        return (sorted_list[mid_index] + sorted_list[mid_index - int(n/4)]) / float(2)"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    \n     # Remove non-alphanumeric characters and convert to lowercase for comparison"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    \n    \n        # Ensure n is within the bounds of p to prevent overflow and errors."}
{"task_id": "HumanEval/50", "solution": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\""}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n     zbcd\n     \"\"\"\n    \n# Define the set of vowels for easy lookup\nvowel_set = set(\"aeiouAEIOU\")\n\n# Use list comprehension to filter out vowels and join the result back into a string\nresult = ''.join([char for char in text if char not in vowel_set])\n\nreturn result\n\n# Example usage:\nprint(remove_vowels(\"\"))  # Output: ''\nprint(remove_vowels(\"abcdef\\nghijklm\"))  # Output: 'bcdf\\nghjklm'\nprint(remove_vowels('abcdef'))  # Output: 'bcdf'\nprint(remove_vowels('aaaaa'))  # Output: ''\nprint(remove_voweleds('aaBAA'))   # Output: B\nprint(removeVoweleds(\"zbcd\"))   # Output: zbcd"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\""}
{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    \n    # Base cases for the first two Fibonacci numbers\n    if n == 0:\n        return 0\n    \n    elif n == 1:\n        return 1\n    \n    \n\t# Recursive case to calculate Fibonacci numbers up to the nth term"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    \n    # Initialize an empty stack to keep track of opening brackets\n    \n    for char in brackets:\n        if char == '<':\n            # Push opening bracket onto the stack\n            stack.append(char)\n        elif char == '>':\n            # Check if there's a matching opening bracket on the stack (stack is not empty)\n            if not stack:\n                return False  # No matching opening bracket found, so it's invalid\n    \n        # If we encounter more than one '>' at any point, it means there are unmatched '>'s, so it's invalid\n    \n        elif char == '>':\n            raise ValueError(f\"Found more than one '>' at '{char}'\")\n\n    \n     # If the stack is empty after processing all characters, all brackets are matched correctly"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    \n    # Check if the list has fewer than two elements\n    if len(l) < 2:\n        return True\n    \n    # Determine the direction of the sequence (increasing or decreasing)\n    \n     # If there's only one element or more elements,\n     # it's trivially monotonic (all elements are equal)"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    # Step 1: Convert both lists to sets for O(1) average time complexity lookups\n    set_l1 = set(l1)\n    set_l2 = set(l2)\n    \n    # Step 2: Find common elements\n    common_elements = []\n    \n    for item in l2:\n        if item in set_l1:\n            common_elements.append(item)\n    \n    # Step 3: Sort and return unique common elements\n    return sorted(common_elements)"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int) -> int:\n    # Check if n is less than or equal to 1\n    if n <= 1:\n        raise ValueError(\"Input must be greater than 1\")\n    \n    # Initialize max_factor with -1 (default value)\n    max_factor = -1\n    \n    # Check divisibility by 2 first\n    while n % 2 ==0:\n        max_factor = 2\n        n //= 2\n    \n    # Check for odd factors from i=3 onwards up to sqrt(n)\n    i = 3\n    while i * i <= n:\n        while n % i ==0:\n            max_factor = i\n            n //= i\n        \n        # Move to the next odd number after checking current one\n        i += 6\n    \n    # If no factor was found, then 'n' itself is a prime number and its own factor (which should be considered as larger)\n    \n    return max_factor"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    \n# Base case: if n is less than or equal to zero, return the result as it's already non-positive or zero.\nif n <= 0:\n        return n\n\n# Recursive case: add the current number (n) with the result of the recursive call for n-1.\nelse:\n        return n + sum_to_n(n - 1)\n\n# Example usage:\nprint(sum_to_n(30))   # Output: Sum up from number one to thirty = \"465\"\nprint(sum_to_n(100)) # Output: Sum up from number one to ten hundred = \"2998\"\nprint(sumToN(-2))   # Output: Sum up from number one minus two = \"-2\""}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    \n    # Initialize a counter for tracking the balance of parentheses\n    balance = 0\n    \n    # Iterate over each character in the string\n    for char in brackets:\n        if char == '(':\n            # Increment the counter for an opening parenthesis\n            balance += 1\n        \n        elif char == ')':\n            # Decrement the counter for a closing parenthesis\n            \n            # If there are no more opening parentheses left, return False (unbalanced)\n            if balance < 0:\n                return False\n            \n            # Decrement after processing one pair of parentheses\n    \n        else:\n            raise ValueError(f\"Invalid character: {char}\")"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    \n    # Initialize an empty list to store the derivatives\n    derivatives = []\n    \n    # Iterate over each coefficient in the input list"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n     \"\"\"\n    \n    # Base cases for Fibonacci numbers up to n = 3 (only need these for initial calculations)\n    \n   # Initialize base cases with values from previous iterations or starting values if needed\n    \n   # Iteratively calculate Fibonacci numbers up to n"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    \n    # Define a set of all lowercase and uppercase vowels for quick lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Initialize counter for vowel count\n    vowel_count = 0\n    \n     # Iterate over each character in the string s"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    \n    # Convert x to a string and get its length\n    num_digits = len(str(x))\n    \n    # Check if shifting more than necessary\n    if shift > num_digits:\n        # Reverse all characters in x (using slicing)\n        reversed_x = str(x)[::-1]\n        return reversed_x\n    \n    # Perform circular left rotation by shifting 'num_digits' places to right\n    else:\n        # Perform left rotation using slicing with positive step size (-shift)\n        rotated_x = str(x)[-shift:] + str(x)[:-(shift)]\n        return rotated_x"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n\n    \"\"\"\n    # Initialize the sum to zero (since there are no uppercase characters)\n    total_sum = 0\n    \n    # Iterate over each character in the string s\n    for char in s:\n        # Check if the character is an uppercase letter using isupper()\n        if char.isupper():\n            # Add its ASCII value to total_sum if it is an uppercase letter.\n            total_sum += ord(char)\n    \n    return total_sum"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    # Split the input string into parts using space as a delimiter\n    parts = s.split()\n    \n    # Extract numbers from each part\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    \n    # Calculate mango fruits by subtracting apples and oranges from 100 or 120\n    mango_fruits = n - (apples + oranges)\n    \n    return mango_fruits"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has th minimum evens and thus it's chosen first\n\n     Example 3:\n         Input: []\n         Output: []\n    \n     Example 4:\n         Input: [5 ,0 ,3 ,0 ,4 ,2]\n         Output:[0 ,1]\n         Explanation : \n                     - First zero (index = -1) is chosen as it's smaller than all others.\n                     - Second zero (index = -6) is chosen as it's smaller than all others.\n                     - Third zero (index = -5) is chosen as it's smaller than all others.\n                    \n            Note : We can choose any number of zeros if they're present in our input array. \n                  This can lead to different outcomes depending on how many zeros we choose. For example,\n                  if our input contains zeros at indices [-6] or [-5], then choosing one from each would result in different outputs,\n                  but for example if our input contains zeros at indices [-6] or [-5], then choosing two from each would result in different outputs.\n\n            Constraints:\n                * n <= len(nodes)\n                * nodes.length <= int(1e9)\n                * every element of `nodes` will be non-negative integer\n                * numbers might have duplicates\n\n            Time Complexity : O(n)\n            Space Complexity : O(1)\n        \n       \"\"\""}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    from collections import Counter\n    \n    # Count the frequency of each integer in the list\n    freq = Counter(lst)\n    \n    # Initialize variables to store the result and current maximum frequency\n    max_freq = 0\n    result = -1\n    \n    # Iterate through the counted frequencies to find the greatest valid number\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            if num > max_freq:\n                max_freq = num\n                result = num\n    \n    return result"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    # Find the minimum and maximum values in the list\n    min_val = min(lst)\n    max_val = max(lst)\n\n    # Create a new list to store sorted elements\n    sorted_lst = []\n\n    # Determine which direction to sort based on whether min_val is less than or greater than max_val\n    if min_val < max_val:\n        # Start with min_value as both ends of remaining elements\n        for i in range(min_index, len(lst) - 1):\n            sorted_lst.append(minVal)\n            sorted_lst.append(maxVal)\n            i += 2  # Move two indices forward after appending\n\n        # If there are any remaining elements after appending all pairs, append them directly to sorted_lst\n        for j in range(i + 2, len(lst)):\n            sorted_lst.append(j)\n\n    elif max_val < min_val:\n        # Start with max_value as both ends of remaining elements\n        for i in range(max_index + 1, len(lst) - 1):\n            sorted_lst.append(maxVal)\n            sorted_lst.append(minVal)\n            i += 2\n\n        # If there are any remaining elements after appending all pairs, append them directly to sorted_lst\n        for j in range(i + 2, len(lst)):\n            sorted_lst.append(j)"}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    # Check if all sides are positive numbers\n    if not (a > 0 and b > 0 and c > 0):\n        return -1\n    \n    # Check if any two sides are less than or equal to their sum\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter of the triangle\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula: Area = sqrt(s * (s-a) * (s-b) * (s-c))\n    \n    area = round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    \n    return area"}
{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    # Dictionary to count occurrences of each element\n    count = {}\n    \n    # Count occurrences of each element in reverse order\n    for num in arr[::-1]:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    \n    # Calculate changes needed for pairs with duplicates\n    changes_needed = 0\n    \n    for num, freq in count.items():\n        if freq > 1:\n            # Each duplicate needs one change per occurrence (except first time)\n            changes_needed += (freq - 1) * (freq + 1) // 2\n    \n    return changes_needed"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi']) \u279e ['hI', 'hi']\n    total_match(['4'], ['1', '2', 3, 4, 5]) \u279e ['4']\n    \n        :param lst1: First list of strings.\n        :param lst2: Second list of strings.\n        :return: The resulting list with fewer characters or both if they are equal.\n        \n        Examples:\n            >>> total_match([], [])\n            []\n            >>> total_match(['hello world'], [\"hello\", \"world\"])\n            [\"hello\", \"world\"]\n            >>> total_match([\"python\"], [\"java\", \"c++\"])\n            [\"python\"]\n            >>>total_match([\"abc\"], [\"abcd\"])\n            []\n        '''\n    \n    # Get lengths and compare them to determine which one is shorter or equal\n    length_difference = len(lst1) - len(lst2)\n    \n     # Return either original or shorter string based on length difference"}
{"task_id": "HumanEval/75", "solution": "def sieve_of_eratosthenes(limit):\n    \"\"\"Generate all primes up to a given limit using the Sieve of Eratosthenes.\"\"\"\n    is_prime = [True] * (limit + 1)\n    p = 2\n    while (p * p <= limit):\n        if (is_prime[p]):\n            for i in range(p * p, limit + 1, p):\n                is_prime[i] = False\n        p += 1\n    \n    # Collecting all prime numbers from 'is_prime'\n    primes = [p for p in range(2, limit + 1) if is_prime[p]]\n    \n    return primes\n\ndef find_multiplication_primes(a):\n    \"\"\"Find all combinations of three distinct primes whose product equals 'a'.\"\"\"\n    \n    def has_three_primes_product(prime_list):\n        n = len(prime_list)\n        for i in range(n - 2): \n            j = i + 1\n            k = n - 1\n            \n            while j < k: \n                current_product = prime_list[i] * prime_list[j] * prime_list[k]\n                \n                # Check if current_product equals 'a'\n                if current_product == a:\n                    return True\n                \n                # Move pointers towards larger products\n                elif current_product > a:\n                    k -= 1\n                \n                else:\n                    j += 1\n            \n        return False\n    \n    # Generate all unique combinations of three distinct primes from sieve_of_er"}
{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\""}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n     '''\n    \n    # Check for negative numbers as they cannot be cubes (except 0)\n    \n    if not isinstance(a, int):\n        return False\n    \n    # Calculate the cube root of |a|"}
{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\""}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    \n# Convert integer to binary using Python's built-in function int()\nbinary_representation = bin(decimal)[2:]  # [2:] removes the '0b' prefix\n\n# Pad with leading zeros if necessary (to ensure all digits are displayed)\nbinary_representation = binary_representation.zfill(len(binary_representation))\n\nreturn binary_representation\n\n# Test cases\nprint(decimal_to_binary(15))  # Output: db1111db\nprint(decimal_to_binary(32))  # Output: db100000db"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    # Check if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through each set of three consecutive characters\n    for i in range(len(s) - 2):\n        # Extract three consecutive characters from the current position to end\n        triplet = s[i:i+3]\n        \n        # Check if all three characters are distinct\n        if len(set(triplet)) != 3:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\""}
{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i +=6\n    \n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string length is \n       a prime number or False otherwise\"\"\"\n    \n    # Get the length of the string\n    str_length = len(string)\n    \n    # Check for primality using the helper function is_prime()\n    \n     # If true, then it's not prime; otherwise, it's prime."}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    if n == 1:\n        return int(\"\".join(str(i) for i in range(7))) + int(\"\".join(str(i) for i in range(8)))\n    \n    # Counting numbers starting with 'a'\n    start_with_a = int(\"\".join(str(i) for i in range(n)) * (9 * pow(8, n - 3)))\n    \n    # Counting numbers ending with 'a'\n    end_with_a = int(\"\".join(str(i) for i in range(n)) * pow(8, n - 3))\n    \n    # Counting numbers that start and end with both\n    start_and_end_with_both = int(\"\".join(str(i) for i in range(n)) * pow(7, n))\n    \n    total_count = start_with_a + end_with_a + start_and_end_with_both\n    \n    return total_count"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 1000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert number to binary and remove 'b' prefix as it is not necessary for binary representation\n    bin_num = bin(N)[2:]\n    \n    # Calculate sum of digits in binary and convert back to string for return value\n    digit_sum = int(bin_num, base=2)\n    \n    return str(digit_sum)"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices. \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over the list, checking only odd indices (1-based index)\n    for i in range(1, len(lst), 2):\n        # Check if the element at this index is even\n        if lst[i] % 2 == 0:\n            # Add it to the total sum\n            total_sum += lst[i]\n    \n    return total_sum"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    \n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n        anti_shuffle('Hi') returns 'Hi'\n        anti_shuffle('hello') returns 'ehllo'\n        anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    \n    # Split the input string into words using space as delimiters\n    words = s.split()\n    \n    # Sort each word based on its ASCII value and join them back into a single string\n    sorted_words = ''.join(sorted(word) for word in words)\n    \n    return sorted_words"}
{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\""}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3 ,4 ,5]\n    * sort_array([2 ,4 ,3 ,0 ,1 ,5]\uff0c6\uff09=>[6\uff0c5\uff0c4\uff0c3 \uff0c2 \uff0c1 \uff0c0]\n    \n        \"\"\"\n    \n     # Check if there are fewer than two elements to consider sorting"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    # Define the alphabet and its shift\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    shift = 2 * 2\n    \n    # Create an empty list to store encrypted characters\n    encrypted_chars = []\n    \n    # Iterate over each character in the input string\n    for char in s:\n        if char.isalpha():\n            # Calculate the new position of the character\n            new_position = (alphabet.index(char) + shift) % 26\n            \n            # Convert back to ASCII and append to result list\n            encrypted_chars.append(chr(new_position))\n        else:\n            # Non-alphabetical characters remain unchanged\n            encrypted_chars.append(char)\n    \n    return ''.join(encrypted_chars)"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    # Check if the list is empty\n    if not lst:\n        return None\n    \n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Check if there are at least two elements\n    if len(sorted_lst) < 2:\n        return None\n    \n    # Return the second element from the sorted list\n    return sorted_lst[1]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    # Split the string into sentences using '.', '?', or '!'\n    sentences = S.split('.')\n    \n    # Initialize a counter for boredoms\n    boredom_count = 0\n    \n    # Iterate through each sentence\n    for sentence in sentences:\n        # Trim leading whitespace from the sentence\n        trimmed_sentence = sentence.strip()\n        \n        # Check if the trimmed sentence starts with \"I\"\n        if trimmed_sentence.startswith(\"I\") and all(char.islower() for char in trimmed_sentence):\n            boredom_count += 1\n    \n    return boredom_count"}
{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \n   \"\"\"\n    \n    # Define vowels for easy lookup\n    vowels = \"aeiouAEIOU\"\n    \n   # Initialize an empty list to store encoded characters"}
{"task_id": "HumanEval/94", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i +=6\n    return True\n\ndef largest_prime_sum(lst):\n    \"\"\"Find the largest prime value in a list and calculate its sum of digits.\"\"\"\n    \n    # Find all primes in the list using is_prime function\n    primes = [num for num in lst if is_prime(num)]\n    \n    # If there are no primes, return -1 (or any other appropriate value)\n    \n    # Check for duplicates by converting to set and back to list, then back to tuple and finally back to integer (though it's not strictly necessary here)\n    \n# Example usage:\nprint(largest_prime_sum([0,3,2,1,3,5,7,4597]))       # Output: \"1\""}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":12345\" }) should return True.\n    \n        :param dict: The input dictionary to be checked\n        :return: True if all keys are strings in lower case or upper case,\n                 otherwise returns False\n        \"\"\"\n    \n    # Check for empty dictionaries\n    if not dict:\n        return False\n    \n    # Initialize flags for lowercase and uppercase checks\n    has_lower = has_upper = None\n    \n     # Iterate over each key-value pair in the dictionary"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7]\n    \n        \"\"\"\n    \n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i +=6\n        \n        return True\n    \n    primes = []\n    \n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\"\"\"\n    \n    # Extracting unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Multiplying units digits and returning result\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # Define a set of uppercase vowels for easy checking\n    upper_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Initialize a counter for uppercase vowels found at even indices\n    upper_count = 0\n    \n    # Iterate over the string with index and character at that index\n    for i, char in enumerate(s):\n        if i % 2 == 0:  # Check if the index is even (i.e., position is divisible by 2)\n            if char in upper_vowels:\n                upper_count += 1\n    \n    return upper_count"}
{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''"}
{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\""}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the input string by commas and spaces using split()\n    \n# Example usage:\nprint(words_string(\"Hi, my name is John\"))  # Output: ['Hi', 'my', 'name', 'is', 'John']\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: ['One', 'two', 'three', 'four', 'five', 'six']"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    # Ensure x is less than or equal to y for simplicity (though this condition isn't strictly necessary)\n    \n    if x > y:\n        return -1\n    \n    # Start from x and move downwards until we find an even number or reach 0 (inclusive)\n    \n    for num in range(x-2,-(-y)+2,-2):\n        if num % 2 == 0:\n            return num"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    # Check if n is greater than m\n    if n > m:\n        return -1\n    \n    # Calculate the sum of numbers from n to m\n    total_sum = sum(range(n, m + 1))\n    \n    # Calculate the number of terms in the range (inclusive)\n    num_terms = m - n + 1\n    \n    # Calculate the average\n    avg = total_sum / num_terms\n    \n    # Round avg to nearest integer and convert it to binary\n    rounded_avg_int = round(avg)\n    \n    return bin(rounded_avg_int)[2:]"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # Helper function to check if all digits are odd\n    def is_all_odd(num):\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return False\n            num //= 10\n        \n        return True\n    \n    # Filter numbers with all odd digits and sort them\n    result = [num for num in x if is_all_odd(num)]"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Step 1: Sort numbers between 1 and 9\n    sorted_arr = sorted([num for num in arr if num >= 1 and num <= 9])\n    \n    # Step 2: Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Step 3: Replace digits with their names\n    result = []\n    for number_str in reversed_arr:\n        digit_name = {\n            '0': 'Zero', '1': 'One', '2': 'Two',\n            '3': 'Three', '4': 'Four', \n            '5': 'Five', \n            '-5': '-Five'\n        }\n        \n        replaced_number_str = ''.join(digit_name[digit] for digit in number_str)\n        \n        result.append(replaced_number_str)\n    \n    return result"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    \"\"\"\n    \n    # Initialize an empty list to store result\n    result = []\n    \n    # Iterate over each number from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Check if 'i' is even or odd using modulo operator % (i.e., checks if 'i' is divisible by 2)\n        if (i % 2 == 0):\n            # If 'i' is even, add its factorial to the result list\n            result.append(factorial(i))\n        else:\n            # If 'i' is odd, calculate its sum and append it to the result list\n            total_sum = sum(range(1, i + 1))\n            result.append(total_sum)\n    \n    return result"}
{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\""}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    \n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    \n    def normalize_number(num):\n        \"\"\"Normalize a number by removing any leading zeros.\"\"\"\n        num_str = str(abs(num))\n        while num_str[0] == '0':\n            num_str = num_str[1:]\n        return int(num_str)\n    \n    def calculate_digit_sum(number):\n        \"\"\"Calculate the sum of digits for a given integer.\"\"\"\n        return sum(int(digit) for digit in str(abs(number)))\n    \n    # Normalize each element in arr\n    normalized_arr = [normalize_number(num) for num in arr]\n    \n    # Count numbers with positive digit sums\n    positive_digit_count = sum(6 if calculate_digit_sum(normalized_num) > 0 else False for normalized_num in normalized_arr)"}
{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\""}
{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # Split the input string into individual characters\n    chars = test.split()\n    \n    # Create an empty dictionary to store letter counts\n    count_dict = {}\n    \n    # Iterate over each character in the list\n    for char in chars:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    \n    # Find the maximum frequency (most repeated character)\n    max_freq = max(count_dict.values())\n    \n    # Collect all characters with maximum frequency into a list of tuples (letter, frequency)\n    max_freq_chars = [(char, freq) for char, freq in count_dict.items() if freq == max_freq]\n    \n    return dict(max_freq_chars)"}
{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\""}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n\",\n     \"the number of odd elements 1n\",\n     \"the number of odd elements 8n\"]\n    \n    >>> odd_count(['3',\"1111111\"])\n    [\"the number of odd elements 3\",\n     \"the number o even elements n\"]\n    \n    \"\"\"\n    \n    # Initialize an empty list to store results\n    result = []\n    \n    # Iterate over each element in lst\n    for item in lst:\n        # Initialize a counter for counting odds and an empty list to store results for that item\n        odds = 0\n        \n        # Iterate over each character in item\n        for char in item:\n            if int(char) % 2 != 0:\n                odds += 1\n        \n        # Constructing result based on current item's count and its index (i)\n        result.append(f\"the number od {odds}element {item[i]}of th{item.count(item)}input.\")\n        \n        # Append None if there are no characters or more than one character (though it doesn't affect our logic)"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    # Initialize variables to keep track of the current sum and the minimum sum found so far\n    current_sum = min_sum = nums[0]\n    \n    # Iterate through each element in the array starting from the second element\n    for num in nums[1:]:\n        # Update current_sum by including or excluding the current number\n        current_sum = min(num, current_sum + num)\n        \n        # Update min_sum if it is greater than or equal to current_sum\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "import math"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5 ,-6]) == [-6,-5,-4,-3,-2]\n    >>> sort_array([1 ,0 ,2 ,3 ,4]) [0 ,1 ,2 ,3 ,4]\n    \"\"\"\n    \n    # Count the number of ones in each integer's binary representation\n    count = {i: bin(i).count('1') for i in arr}\n    \n    # Sort the array using a custom key: (number_of_ones_in_binary_representation,\n                                        # decimal_value)"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    # Define a set of vowels for quick lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each word in the split list\n    for word in words:\n        count_consonants = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count of consonants matches n, add the word to the result list\n        if count_consonants == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    vowels_in_consonants = set()\n    \n    # Identify consonants\n    for char in word:\n        if char.isalpha() and char not in vowels:\n            vowels_in_consonants.add(char)\n    \n    # Find closest vowel from right side of identified consonants\n    closest_vowel = \"\"\n    \n    for i in range(len(vowels_in_consonants) - 1):\n        current_char = vowels_in_consonants[i]\n        next_char = vowels_in_consonANTS[i + 1]\n        \n        # Check if current_char is closer to next_char than any other character found so far\n        if abs(ord(current_char) - ord(next_char)) < abs(ord(closest_vowel)):\n            closest_vowel = current_char\n    \n    return closest_vowel"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    # Count opening and closing parentheses for each string\n    count_open = sum(1 for char in lst[0] if char == '(')\n    count_close = sum(1 for char in lst[0] if char == ')')\n    \n    # Check if total counts are equal (both even)\n    if (count_open + count_close) % 2 != 0:\n        return \"No\"\n    \n    # Calculate total number of unmatched opening and closing pairs\n    unmatched_open = lst[1].count('(') - lst[1].count(')')\n    \n    # Check for an imbalance between unmatched opening and closing pairs\n    imbalance = abs(unmatched_open - unmatched_close)\n    \n    # Determine if concatenation is possible based on imbalance\n    return \"Yes\" if imbalance <= 1 else \"No\""}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2,-1,-2,-1], k = 1\n        Output: [2]\n    \n    Note:\n        The length of the array will be in the range of [1 ,1000].\n        The elements in the array will be in the range of [-1000 ,   +\u221e).\n        \n\"\"\"\n# Sort the array to easily access max elements at index i\narr.sort()\n\n# Use slicing to get up to 'k' max elements from end (i.e., from index n-k)\nmax_k_elements = arr[-k:]\n\nreturn max_k_elements\n\n# Test cases:\nprint(maximum([-3,-4,-5], K=3))   # Output should be [-4,-3,-5]\nprint(maximum([4,-4,-6], K=2))   # Output should be [6]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==>9\n    solution([30, 13, 24])\n    \n        \"\"\"\n    sum_odd = [num for i,num in enumerate(lst) if i %2 ==0 and num %2 !=0]\n    \n    return sum(sum_odd)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    total_sum = sum([x for x in arr[:k] if -99 < x < -5])\n    \n    return total_sum"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n        get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1 and 5.\n    \n        get_odd_collatz(7) returns [7]\n        \n        get_odd_collatz(9) returns []\n        \n        get_odd_collatz(2048) returns []\n        \n        get_odd_collatz(60085747583649933)\n    \n     \"\"\"\n    \n    def collate(n):\n        \"\"\"Helper function to generate Collatz sequences.\"\"\"\n        if n == -2:\n            return []\n        \n        result = []\n        \n        while n != -2:\n            result.append(n)\n            \n            if n % (n + (-n)) == (n + (-n)):\n                # If even number then append half of current number\n                result.append(int((n + (-n)) / (2)))\n            else:\n                # If odd number then append triple current number plus one\n                result.append(int((3 * (n + (-n))) + (1)))\n            \n            # Update current number based on whether it was even or odd"}
{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\""}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    # Check if the input string contains any whitespace characters\n    if ' ' in txt:\n        # Split the string by whitespace and return the result as a list of words\n        return txt.split()\n    else:\n        # Count lowercase letters with odd order in the alphabet and return their count as an integer\n        odd_order_count = sum(1 for char in txt if ord(char) < 97 or ord(char) > 122)\n        return odd_order_count"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    # Dictionary to store frequency of each number\n    frequency = {}\n    \n    # Count occurrences of each number\n    for num in lst:\n        if num not in frequency:\n            frequency[num] = 1\n        else:\n            frequency[num] += 1\n    \n    # Check if any number appears more than once\n    has_duplicates = any(frequency[num] > 1 for num in frequency)\n    \n    # Check if the list is sorted and there are no duplicates\n    return has_duplicates and all(x <= y for x, y in zip(lst, lst[1:]))"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    # Calculate the start and end of their common interval\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if there is an overlap\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if this length is a prime number\n    def is_prime(n):\n        \"\"\"Check if a number n is prime.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Check for primality and print \"YES\" or \"NO\"\n    return \"YES\" if is_prime(length) else \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    # Check if the array is empty\n    if not arr:\n        return None\n    \n    # Initialize product_sign and total_sum\n    product_sign = 1\n    total_sum = 0\n    \n    # Iterate through each element in the array\n    for num in arr:\n        # Multiply by current sign and add to total sum\n        total_sum += num * product_sign\n    \n    return total_sum"}
{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\""}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    # Base cases for the first two numbers in the Tribonacci sequence\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n\n    # Initialize the list with the first two numbers of the Tribonacci sequence\n    trib_sequence = [3, 1]\n\n    # Generate subsequent numbers iteratively using a loop\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            next_value = trib_sequence[i - 1] + trib_sequence[i - 2]\n        else:\n            next_value = trib_sequence[i - 1] + trib_sequence[i - 2] + trib_sequence[i + 1]\n        \n        # Append the new value to the list\n        trib_sequence.append(next_value)\n\n    returntrib_sequence"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n\n    For example:\n    >>> digits(1)\n    1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\n    \n    # Convert n to a string and remove any negative sign if present\n    num_str = str(abs(n))\n    \n    # Initialize product as 1 (since multiplying by zero results in zero)\n    \n    for char in num_str:\n        # Check if character is an odd digit (i.e., '1', '3', '5', etc.)\n        if int(char) % 2 != 0:\n            # Multiply current product by this odd digit and update product variable\n            product *= int(char)\n    \n    return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    # Initialize variables\n    stack = []\n    nested_count = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        if char == '[':\n            # Push opening bracket onto stack\n            stack.append(char)\n        elif char == ']':\n            # Check for matching open bracket on top of stack\n            if not stack or char != stack[-1]:\n                return False  # No matching open bracket\n            \n            # Pop from stack (if available)\n            stacked_bracket = len(stack) > 0 and\tstack.pop()\n            \n            # Increment nesting count when an open brace is matched with a closing brace\n            nested_count += stacked_bracket\n    \n    # Check if any unmatched open brackets were left after processing all characters\n    return nested_count > 0"}
{"task_id": "HumanEval/133", "solution": "import math"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    # Step 1: Check if the string is empty\n    if not txt:\n        return False\n    \n    # Step 2: Extract the last character\n    last_char = txt[-1]\n    \n    # Step 3: Check if this last character is an alphabetical letter\n    if 'a' <= last_char <= 'z' or 'A' <= last_char <= 'Z':\n        # Step 4: Check if it's not part of a word (contains spaces)\n        for char in txt.split():\n            space_count = char.count(' ')\n            word_start = len(char) - space_count - 1\n        \n            # Step 5: Ensure that we're at a non-space position before checking for letters\n            pos = len(char) - len(word_start)\n            \n            # Ensure that there are no other spaces between words (if any)\n            while pos > 0 and char[pos] == ' ':\n                pos -= 1\n            \n            # If there are no other spaces between words, check for letters after punctuation marks or non-alphabetical characters"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    # Initialize variables to store the largest valid index and its corresponding value\n    max_valid_index = -1\n    max_valid_value = float('-inf')\n    \n    # Iterate through the array starting from the second element (index 1)\n    for i in range(1, len(arr)):\n        # Check if current element is greater than or equal to previous one\n        if arr[i] >= arr[i - 1]:\n            # Update max_valid_index and max_valid_value if necessary\n            if arr[i] > max_valid_value:\n                max_valid_index = i\n                max_valid_value = arr[i]\n    \n    return max_valid_index"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    # Initialize variables to store the largest negative and smallest positive integers\n    largest_negative = None\n    smallest_positive = None\n    \n    # Iterate through each number in the list\n    for num in lst:\n        if num < 0:\n            # Update largest_negative if current number is larger than it\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n                \n        elif num > 0:\n            # Update smallest_positive if current number is smaller than it\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    # Return a tuple (largest_negative, smallest_positive)\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    \n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    # Check if both inputs are strings\n    if isinstance(a.strip(), str) and isinstance(b.strip(), str):\n        # Convert strings to floats for comparison\n        num_a = float(a.strip())\n        num_b = float(b.strip())\n        \n        # Compare the numbers and return the larger one or None if they are equal\n        return max(num_a if num_a > num_b else num_b)\n    \n    # If neither input is a string (integer or float), directly return None for comparison purposes"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    # Initialize memoization dictionary\n    memo = {}\n    \n    def dfs(start, current_sum, count):\n        # Base case: if count reaches 4 and current_sum equals n\n        if count == 4 and current_sum == n:\n            return True\n        \n        # If already computed, return cached result\n        if (start, current_sum) in memo:\n            return memo[(start, current_sum)]\n        \n        # Try adding each possible next number starting from start + 2\n        for i in range(start + 2, min(n + 1000000 // n // i + i // j for j in range(15)), 2): \n            next_number = i * 2\n            \n            # Recursively check the remaining part of the sequence\n            result = dfs(i + j * n // next_number % n / j + (next_number % n / j), \n                           current_sum + next_number % n / j,\n                           count + int((i < start)) > int((j < start)))\n            \n            # Memoize the result before returning it\n            memo[(start, current_sum)] = result\n        \n        return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n        Args:\n        n (int): The number for which to calculate the Brazilian factorial.\n\n        Returns:\n        int: The Brazilian factorial of the given number.\n        \n            Raises:\n            ValueError: If n is not greater than 0.\n        \n        Examples:\n            >>> special_factorial(4)\n            288\n            >>> special_factorial(3)\n            6\n        \"\"\"\n    \n    if n <= 0 or not isinstance(n, int):\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize result with base case value for factorials of zero and one\n    result = math.factorial(n) if n == 0 or n == 1 else math.factorial(n - 1) * math.factorial(n - 2) * ... * math.factorial(1)\n    \n    return result"}
{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\""}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    # Check if there are more than three digits\n    if len(file_name) > 3:\n        return \"No\"\n    \n    # Split the file name into parts\n    parts = file_name.split('.')\n    \n    # Check if there is exactly one dot\n    if len(parts) != 2:\n        return \"No\"\n    \n    # Extract parts before and after the dot\n    part_before_dot = parts[0]\n    part_after_dot = parts[1]\n    \n    # Check for non-empty substrings and validity of them\n    if not part_before_dot or not part_after_dot:\n        return \"No\"\n    \n    first_char = part_before_dot[0].lower()\n    \n     # Validate first character (letter)"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not multiples of 3 or 4. The function shall then return the sum of all entries.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    # Initialize an empty list to store squared values at multiples of indices\n    squared_values = []\n    \n    # Iterate over each element in the input list\n    for i, num in enumerate(lst):\n        # Check if i is a multiple of both indices (0 and -3)\n        if i % (3 * -1) == -2:  \n            # Square and add to squared_values if true\n            squared_values.append(num ** 2)\n        elif i % (4 * -1) == -2:  \n            # Cube and add to squared_values if true\n            squared_values.append(num ** 3)"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    # Helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i +=6\n        \n        return True\n\n    # Split the sentence into words using space as the delimiter\n    words = sentence.split()\n    \n    # Filter words based on their length being prime and keep their original order in case of ties (though there are no ties)\n    result = [word for word in words if is_prime(len(word))]\n    \n    # Join the filtered list back into a string with spaces between them, preserving original order of first word in case of ties (though there are no ties)\n    result_str = ' '.join(result)\n    \n    return result_str"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Parse x and n as strings\n    num_x = int(x.split('/')[0])\n    den_x = int(x.split('/')[1])\n    \n    num_n = int(n.split('/')[0])\n    den_n = int(n.split('/')[1])\n    \n    # Multiply x * n\n    product_num = num_x * num_n\n    \n    # Check if product_num is divisible by product_denom (both are positive)\n    return product_num % product_denom == 0"}
{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\""}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    def is_first_digit_odd(n):\n        \"\"\"Check if the first digit of a number is odd.\"\"\"\n        num_str = str(abs(n))\n        return int(num_str[0]) % 2 != 0\n\n    def is_last_digit_odd(n):\n        \"\"\"Check if the last digit of a number is odd.\"\"\"\n        num_str = str(abs(n))\n        return int(num_str[-1]) % 2 != 0\n\n    # Filter numbers greater than 10 and both first and last digits are odd\n    result = [num for num in nums if num > 10 and (is_first_digit_odd(num) or is_last_digit_odd(num))]\n    \n    return len(result)"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) where i < j < k, \n    and a[i] + a[j] + a[k] is divisible by 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    \n    # Calculate all possible sums for each value of 'i'\n    sums = {}\n    \n    for i in range(1, n+1):\n        # Calculate the sum for all pairs (j > k)\n        if len(sums) ==0:\n            sums[0]=0\n        \n            # Iterate over pairs (j > k)\n            for j in range(i+2,n+2):\n                s=sums.get(j-i-2,-9999)\n                if s!= -9999:\n                    sums[(j-i-2)+sums.get(j,i)]+=s\n    \n     # Count how many values have at least one pair whose sum is divisible by three"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    # List of planets in order from closest to farthest from the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planet names are valid\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find indices of the given planets\n    index1 = planets.index(planet1) + 1  # + 1 because Python uses zero-based indexing\n    index2 = planets.index(planet2) + 1\n    \n    # Ensure index numbers are within bounds of the list length\n    if index1 > len(planets) - 3 or index2 > len(planets) - 3:\n        return ()\n    \n    # Return a tuple containing all elements between indices\n    return tuple(planets[index1:index2])"}
{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\""}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    \n    # Function to check if a number is prime\n    def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Check if n is prime and return corresponding value based on whether it's odd or even\n    result = (x * y) // (is_prime(n)) + (n % len(str(n))) * y\n    \n    return result"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    \n    '''\n    \n   # Filter out non-integer and negative numbers from the list and calculate their squares if they are odd."}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of same length denoting how far off each guess was compared.\"\"\"\n    \n    # Initialize an empty list for storing differences\n    result = []\n    \n    # Iterate over both arrays using nested loops\n    for i in range(len(game)):\n        game_score = game[i]\n        guess_score = guess[i]\n        \n        # Calculate absolute difference between game_score and guess_score\n        diff = abs(game_score - guess_score)\n        \n        # Append the calculated difference to result array\n        result.append(diff)\n    \n    return result"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    # Initialize variables to store the strongest extension and its strength\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    # Iterate through each extension in the list\n    for extension in extensions:\n        # Count the number of uppercase and lowercase letters in the extension name\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        \n        # Calculate the strength of this extension using the formula CAP - SM (CAP is uppercase, SM is lowercase)\n        strength = cap_count - sm_count\n        \n        # Check if this is stronger than the current best or if it has equal strength but comes first alphabetically (if ties)\n        if strength > max_strength or (strength == max_strength and class_name < strongest_extension):\n            strongest_extension = class_name + '.' + str(extension)\n            max_strength = strength\n    \n    return strongest_extension"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    # Generate all rotations of b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check each rotation against a and see if it's a substring of 'a'\n    for r in rotations:\n        if r in a:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to a string to easily access each digit\n    num_str = str(num)\n    \n    # Initialize counters for even and odd digits\n    evens = 0\n    odds = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in num_str:\n        digit = int(char)\n        \n        # Check if the digit is even or odd and increment respective counter\n        if digit % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    \n    return (evens, odds)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    \n    # Define the mapping of integers to their Roman numerals"}
{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''"}
{"task_id": "HumanEval/158", "solution": "from collections import Counter"}
{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\""}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Initialize an empty string for building the expression\n    expr = \"\"\n    \n    # Iterate over each operator in the operator list\n    for i, op in enumerate(operator):\n        if op == '+':\n            expr += f\"{operand[i]} + \"\n        elif op == '-':\n            expr += f\"{operand[i]} - \"\n        elif op == '*':\n            expr += f\"{operand[i]} * \"\n        elif op == '//':\n            expr += f\"{operand[i]} // \"\n        elif op == '**':\n            expr += f\"{operand[i]} **\"\n    \n    # Remove trailing space and return the evaluated result\n    return eval(expr.strip())\noperator = ['+', '*', '-']"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\"\"\"\n    \n    # Check if there are any letters in the string\n    has_letters = any(char.isalpha() for char in s)\n    \n    # Reverse only if there are letters\n    if has_letters:\n        return ''.join(char.swapcase() for char in s)\n    \n    # Reverse all characters otherwise\n    else:\n        return s[::-1]"}
{"task_id": "HumanEval/162", "solution": "import hashlib\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    # Create an md5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the bytes of the input text\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Return the hexadecimal representation of the digest\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    \n    # Initialize an empty list to store even digits\n    result = []\n    \n    # Iterate through the range from 'a' to 'b'\n    for num in range(a + 1):\n        # Check if the number is an even digit\n        if num % 2 ==0:\n            result.append(num)\n    \n    # Sort the list of even digits in ascending order\n    result.sort()\n    \n    return result"}
